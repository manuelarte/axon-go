// Package axongo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package axongo

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReadAggregateEvents request
	ReadAggregateEvents(ctx context.Context, aggregateId string, params *ReadAggregateEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAggregateEventsPaged request
	ReadAggregateEventsPaged(ctx context.Context, aggregateId string, params *ReadAggregateEventsPagedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSnapshots request
	ReadSnapshots(ctx context.Context, aggregateId string, params *ReadSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DispatchCommandWithBody request with any body
	DispatchCommandWithBody(ctx context.Context, params *DispatchCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DispatchCommand(ctx context.Context, params *DispatchCommandParams, body DispatchCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DispatchCommandRawWithBody request with any body
	DispatchCommandRawWithBody(ctx context.Context, name string, params *DispatchCommandRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Endpoints request
	Endpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterEndpointWithBody request with any body
	RegisterEndpointWithBody(ctx context.Context, params *RegisterEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterEndpoint(ctx context.Context, params *RegisterEndpointParams, body RegisterEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEndpoint request
	DeleteEndpoint(ctx context.Context, endpointId openapi_types.UUID, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEndpoint request
	GetEndpoint(ctx context.Context, endpointId string, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchEndpoint request
	PatchEndpoint(ctx context.Context, endpointId openapi_types.UUID, params *PatchEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEndpointWithBody request with any body
	UpdateEndpointWithBody(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEndpoint(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, body UpdateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterCommandHandlerWithBody request with any body
	RegisterCommandHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterCommandHandler(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, body RegisterCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommandHandler request
	DeleteCommandHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteCommandHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommandHandler request
	GetCommandHandler(ctx context.Context, endpoint string, handler string, params *GetCommandHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCommandHandlerWithBody request with any body
	UpdateCommandHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCommandHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, body UpdateCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterEventHandlerWithBody request with any body
	RegisterEventHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterEventHandler(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, body RegisterEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEventHandler request
	DeleteEventHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteEventHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventHandler request
	GetEventHandler(ctx context.Context, endpoint string, handler string, params *GetEventHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEventHandlerWithBody request with any body
	UpdateEventHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEventHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, body UpdateEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterQueryHandlerWithBody request with any body
	RegisterQueryHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterQueryHandler(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, body RegisterQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteQueryHandler request
	DeleteQueryHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteQueryHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueryHandler request
	GetQueryHandler(ctx context.Context, endpoint string, handler string, params *GetQueryHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateQueryHandlerWithBody request with any body
	UpdateQueryHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateQueryHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, body UpdateQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishEvents1WithBody request with any body
	PublishEvents1WithBody(ctx context.Context, params *PublishEvents1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishEvents1(ctx context.Context, params *PublishEvents1Params, body PublishEvents1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishEvents1WithApplicationVndAxoniqEventListPlusJSONBody(ctx context.Context, params *PublishEvents1Params, body PublishEvents1ApplicationVndAxoniqEventListPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishEventRawWithBody request with any body
	PublishEventRawWithBody(ctx context.Context, name string, params *PublishEventRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DispatchQueryRawWithBody request with any body
	DispatchQueryRawWithBody(ctx context.Context, params *DispatchQueryRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DispatchQueryRaw(ctx context.Context, params *DispatchQueryRawParams, body DispatchQueryRawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DispatchQueryWithBody request with any body
	DispatchQueryWithBody(ctx context.Context, name string, params *DispatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishSnapshotWithBody request with any body
	PublishSnapshotWithBody(ctx context.Context, params *PublishSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishSnapshot(ctx context.Context, params *PublishSnapshotParams, body PublishSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishSnapshotRawWithBody request with any body
	PublishSnapshotRawWithBody(ctx context.Context, aggregateId string, params *PublishSnapshotRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReadAggregateEvents(ctx context.Context, aggregateId string, params *ReadAggregateEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAggregateEventsRequest(c.Server, aggregateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAggregateEventsPaged(ctx context.Context, aggregateId string, params *ReadAggregateEventsPagedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAggregateEventsPagedRequest(c.Server, aggregateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSnapshots(ctx context.Context, aggregateId string, params *ReadSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSnapshotsRequest(c.Server, aggregateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DispatchCommandWithBody(ctx context.Context, params *DispatchCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDispatchCommandRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DispatchCommand(ctx context.Context, params *DispatchCommandParams, body DispatchCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDispatchCommandRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DispatchCommandRawWithBody(ctx context.Context, name string, params *DispatchCommandRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDispatchCommandRawRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Endpoints(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEndpointWithBody(ctx context.Context, params *RegisterEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEndpointRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEndpoint(ctx context.Context, params *RegisterEndpointParams, body RegisterEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEndpointRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpoint(ctx context.Context, endpointId openapi_types.UUID, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEndpoint(ctx context.Context, endpointId string, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEndpoint(ctx context.Context, endpointId openapi_types.UUID, params *PatchEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEndpointWithBody(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEndpointRequestWithBody(c.Server, endpointId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEndpoint(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, body UpdateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEndpointRequest(c.Server, endpointId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterCommandHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterCommandHandlerRequestWithBody(c.Server, endpoint, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterCommandHandler(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, body RegisterCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterCommandHandlerRequest(c.Server, endpoint, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommandHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteCommandHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommandHandlerRequest(c.Server, endpoint, handler, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommandHandler(ctx context.Context, endpoint string, handler string, params *GetCommandHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommandHandlerRequest(c.Server, endpoint, handler, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommandHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommandHandlerRequestWithBody(c.Server, endpoint, handler, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommandHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, body UpdateCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommandHandlerRequest(c.Server, endpoint, handler, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEventHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEventHandlerRequestWithBody(c.Server, endpoint, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEventHandler(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, body RegisterEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEventHandlerRequest(c.Server, endpoint, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEventHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteEventHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEventHandlerRequest(c.Server, endpoint, handler, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventHandler(ctx context.Context, endpoint string, handler string, params *GetEventHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventHandlerRequest(c.Server, endpoint, handler, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEventHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEventHandlerRequestWithBody(c.Server, endpoint, handler, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEventHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, body UpdateEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEventHandlerRequest(c.Server, endpoint, handler, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterQueryHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterQueryHandlerRequestWithBody(c.Server, endpoint, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterQueryHandler(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, body RegisterQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterQueryHandlerRequest(c.Server, endpoint, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteQueryHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteQueryHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteQueryHandlerRequest(c.Server, endpoint, handler, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueryHandler(ctx context.Context, endpoint string, handler string, params *GetQueryHandlerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueryHandlerRequest(c.Server, endpoint, handler, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateQueryHandlerWithBody(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateQueryHandlerRequestWithBody(c.Server, endpoint, handler, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateQueryHandler(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, body UpdateQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateQueryHandlerRequest(c.Server, endpoint, handler, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishEvents1WithBody(ctx context.Context, params *PublishEvents1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEvents1RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishEvents1(ctx context.Context, params *PublishEvents1Params, body PublishEvents1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEvents1Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishEvents1WithApplicationVndAxoniqEventListPlusJSONBody(ctx context.Context, params *PublishEvents1Params, body PublishEvents1ApplicationVndAxoniqEventListPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEvents1RequestWithApplicationVndAxoniqEventListPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishEventRawWithBody(ctx context.Context, name string, params *PublishEventRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEventRawRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DispatchQueryRawWithBody(ctx context.Context, params *DispatchQueryRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDispatchQueryRawRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DispatchQueryRaw(ctx context.Context, params *DispatchQueryRawParams, body DispatchQueryRawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDispatchQueryRawRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DispatchQueryWithBody(ctx context.Context, name string, params *DispatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDispatchQueryRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishSnapshotWithBody(ctx context.Context, params *PublishSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishSnapshotRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishSnapshot(ctx context.Context, params *PublishSnapshotParams, body PublishSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishSnapshotRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishSnapshotRawWithBody(ctx context.Context, aggregateId string, params *PublishSnapshotRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishSnapshotRawRequestWithBody(c.Server, aggregateId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReadAggregateEventsRequest generates requests for ReadAggregateEvents
func NewReadAggregateEventsRequest(server string, aggregateId string, params *ReadAggregateEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aggregateId", runtime.ParamLocationPath, aggregateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/aggregates/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MinSequence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minSequence", runtime.ParamLocationQuery, *params.MinSequence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadAggregateEventsPagedRequest generates requests for ReadAggregateEventsPaged
func NewReadAggregateEventsPagedRequest(server string, aggregateId string, params *ReadAggregateEventsPagedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aggregateId", runtime.ParamLocationPath, aggregateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/aggregates/%s/eventsPaged", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageOffset", runtime.ParamLocationQuery, params.PageOffset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSnapshotsRequest generates requests for ReadSnapshots
func NewReadSnapshotsRequest(server string, aggregateId string, params *ReadSnapshotsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aggregateId", runtime.ParamLocationPath, aggregateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/aggregates/%s/snapshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MinSequence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minSequence", runtime.ParamLocationQuery, *params.MinSequence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDispatchCommandRequest calls the generic DispatchCommand builder with application/json body
func NewDispatchCommandRequest(server string, params *DispatchCommandParams, body DispatchCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDispatchCommandRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDispatchCommandRequestWithBody generates requests for DispatchCommand with any type of body
func NewDispatchCommandRequestWithBody(server string, params *DispatchCommandParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/commands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDispatchCommandRawRequestWithBody generates requests for DispatchCommandRaw with any type of body
func NewDispatchCommandRawRequestWithBody(server string, name string, params *DispatchCommandRawParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/commands/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AxonIQMessageId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-MessageId", runtime.ParamLocationHeader, *params.AxonIQMessageId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-MessageId", headerParam0)
		}

		if params.AxonIQPayloadType != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadType", runtime.ParamLocationHeader, *params.AxonIQPayloadType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadType", headerParam1)
		}

		if params.AxonIQPayloadRevision != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadRevision", runtime.ParamLocationHeader, *params.AxonIQPayloadRevision)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadRevision", headerParam2)
		}

		if params.AxonIQPriority != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-Priority", runtime.ParamLocationHeader, *params.AxonIQPriority)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-Priority", headerParam3)
		}

		if params.AxonIQRoutingKey != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-RoutingKey", runtime.ParamLocationHeader, *params.AxonIQRoutingKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-RoutingKey", headerParam4)
		}

	}

	return req, nil
}

// NewEndpointsRequest generates requests for Endpoints
func NewEndpointsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterEndpointRequest calls the generic RegisterEndpoint builder with application/json body
func NewRegisterEndpointRequest(server string, params *RegisterEndpointParams, body RegisterEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterEndpointRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRegisterEndpointRequestWithBody generates requests for RegisterEndpoint with any type of body
func NewRegisterEndpointRequestWithBody(server string, params *RegisterEndpointParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEndpointRequest generates requests for DeleteEndpoint
func NewDeleteEndpointRequest(server string, endpointId openapi_types.UUID, params *DeleteEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEndpointRequest generates requests for GetEndpoint
func NewGetEndpointRequest(server string, endpointId string, params *GetEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchEndpointRequest generates requests for PatchEndpoint
func NewPatchEndpointRequest(server string, endpointId openapi_types.UUID, params *PatchEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, params.Active); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEndpointRequest calls the generic UpdateEndpoint builder with application/json body
func NewUpdateEndpointRequest(server string, endpointId openapi_types.UUID, params *UpdateEndpointParams, body UpdateEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEndpointRequestWithBody(server, endpointId, params, "application/json", bodyReader)
}

// NewUpdateEndpointRequestWithBody generates requests for UpdateEndpoint with any type of body
func NewUpdateEndpointRequestWithBody(server string, endpointId openapi_types.UUID, params *UpdateEndpointParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterCommandHandlerRequest calls the generic RegisterCommandHandler builder with application/json body
func NewRegisterCommandHandlerRequest(server string, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, body RegisterCommandHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterCommandHandlerRequestWithBody(server, endpoint, params, "application/json", bodyReader)
}

// NewRegisterCommandHandlerRequestWithBody generates requests for RegisterCommandHandler with any type of body
func NewRegisterCommandHandlerRequestWithBody(server string, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/commandHandlers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommandHandlerRequest generates requests for DeleteCommandHandler
func NewDeleteCommandHandlerRequest(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteCommandHandlerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/commandHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommandHandlerRequest generates requests for GetCommandHandler
func NewGetCommandHandlerRequest(server string, endpoint string, handler string, params *GetCommandHandlerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/commandHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCommandHandlerRequest calls the generic UpdateCommandHandler builder with application/json body
func NewUpdateCommandHandlerRequest(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, body UpdateCommandHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCommandHandlerRequestWithBody(server, endpoint, handler, params, "application/json", bodyReader)
}

// NewUpdateCommandHandlerRequestWithBody generates requests for UpdateCommandHandler with any type of body
func NewUpdateCommandHandlerRequestWithBody(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/commandHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterEventHandlerRequest calls the generic RegisterEventHandler builder with application/json body
func NewRegisterEventHandlerRequest(server string, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, body RegisterEventHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterEventHandlerRequestWithBody(server, endpoint, params, "application/json", bodyReader)
}

// NewRegisterEventHandlerRequestWithBody generates requests for RegisterEventHandler with any type of body
func NewRegisterEventHandlerRequestWithBody(server string, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/eventHandlers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEventHandlerRequest generates requests for DeleteEventHandler
func NewDeleteEventHandlerRequest(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteEventHandlerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/eventHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventHandlerRequest generates requests for GetEventHandler
func NewGetEventHandlerRequest(server string, endpoint string, handler string, params *GetEventHandlerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/eventHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEventHandlerRequest calls the generic UpdateEventHandler builder with application/json body
func NewUpdateEventHandlerRequest(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, body UpdateEventHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEventHandlerRequestWithBody(server, endpoint, handler, params, "application/json", bodyReader)
}

// NewUpdateEventHandlerRequestWithBody generates requests for UpdateEventHandler with any type of body
func NewUpdateEventHandlerRequestWithBody(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/eventHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterQueryHandlerRequest calls the generic RegisterQueryHandler builder with application/json body
func NewRegisterQueryHandlerRequest(server string, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, body RegisterQueryHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterQueryHandlerRequestWithBody(server, endpoint, params, "application/json", bodyReader)
}

// NewRegisterQueryHandlerRequestWithBody generates requests for RegisterQueryHandler with any type of body
func NewRegisterQueryHandlerRequestWithBody(server string, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/queryHandlers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteQueryHandlerRequest generates requests for DeleteQueryHandler
func NewDeleteQueryHandlerRequest(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteQueryHandlerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/queryHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQueryHandlerRequest generates requests for GetQueryHandler
func NewGetQueryHandlerRequest(server string, endpoint string, handler string, params *GetQueryHandlerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/queryHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateQueryHandlerRequest calls the generic UpdateQueryHandler builder with application/json body
func NewUpdateQueryHandlerRequest(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, body UpdateQueryHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateQueryHandlerRequestWithBody(server, endpoint, handler, params, "application/json", bodyReader)
}

// NewUpdateQueryHandlerRequestWithBody generates requests for UpdateQueryHandler with any type of body
func NewUpdateQueryHandlerRequestWithBody(server string, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "handler", runtime.ParamLocationPath, handler)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/endpoints/%s/queryHandlers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishEvents1Request calls the generic PublishEvents1 builder with application/json body
func NewPublishEvents1Request(server string, params *PublishEvents1Params, body PublishEvents1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishEvents1RequestWithBody(server, params, "application/json", bodyReader)
}

// NewPublishEvents1RequestWithApplicationVndAxoniqEventListPlusJSONBody calls the generic PublishEvents1 builder with application/vnd.axoniq.event.list+json body
func NewPublishEvents1RequestWithApplicationVndAxoniqEventListPlusJSONBody(server string, params *PublishEvents1Params, body PublishEvents1ApplicationVndAxoniqEventListPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishEvents1RequestWithBody(server, params, "application/vnd.axoniq.event.list+json", bodyReader)
}

// NewPublishEvents1RequestWithBody generates requests for PublishEvents1 with any type of body
func NewPublishEvents1RequestWithBody(server string, params *PublishEvents1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishEventRawRequestWithBody generates requests for PublishEventRaw with any type of body
func NewPublishEventRawRequestWithBody(server string, name string, params *PublishEventRawParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AxonIQMessageId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-MessageId", runtime.ParamLocationHeader, *params.AxonIQMessageId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-MessageId", headerParam0)
		}

		if params.AxonIQPayloadRevision != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadRevision", runtime.ParamLocationHeader, *params.AxonIQPayloadRevision)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadRevision", headerParam1)
		}

		if params.AxonIQAggregateId != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-AggregateId", runtime.ParamLocationHeader, *params.AxonIQAggregateId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-AggregateId", headerParam2)
		}

		if params.AxonIQAggregateType != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-AggregateType", runtime.ParamLocationHeader, *params.AxonIQAggregateType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-AggregateType", headerParam3)
		}

		if params.AxonIQSequenceNumber != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-SequenceNumber", runtime.ParamLocationHeader, *params.AxonIQSequenceNumber)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-SequenceNumber", headerParam4)
		}

		if params.AxonIQDateTime != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-DateTime", runtime.ParamLocationHeader, *params.AxonIQDateTime)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-DateTime", headerParam5)
		}

	}

	return req, nil
}

// NewDispatchQueryRawRequest calls the generic DispatchQueryRaw builder with application/json body
func NewDispatchQueryRawRequest(server string, params *DispatchQueryRawParams, body DispatchQueryRawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDispatchQueryRawRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDispatchQueryRawRequestWithBody generates requests for DispatchQueryRaw with any type of body
func NewDispatchQueryRawRequestWithBody(server string, params *DispatchQueryRawParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/queries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDispatchQueryRequestWithBody generates requests for DispatchQuery with any type of body
func NewDispatchQueryRequestWithBody(server string, name string, params *DispatchQueryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/queries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AxonIQMessageId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-MessageId", runtime.ParamLocationHeader, *params.AxonIQMessageId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-MessageId", headerParam0)
		}

		if params.AxonIQPayloadType != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadType", runtime.ParamLocationHeader, *params.AxonIQPayloadType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadType", headerParam1)
		}

		if params.AxonIQPayloadRevision != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadRevision", runtime.ParamLocationHeader, *params.AxonIQPayloadRevision)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadRevision", headerParam2)
		}

		if params.AxonIQResponseType != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-ResponseType", runtime.ParamLocationHeader, *params.AxonIQResponseType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-ResponseType", headerParam3)
		}

		if params.AxonIQResponseTypeEncoding != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-ResponseTypeEncoding", runtime.ParamLocationHeader, *params.AxonIQResponseTypeEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-ResponseTypeEncoding", headerParam4)
		}

		if params.AxonIQResponseCardinality != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-ResponseCardinality", runtime.ParamLocationHeader, *params.AxonIQResponseCardinality)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-ResponseCardinality", headerParam5)
		}

		if params.AxonIQNumberOfResponders != nil {
			var headerParam6 string

			headerParam6, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-NumberOfResponders", runtime.ParamLocationHeader, *params.AxonIQNumberOfResponders)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-NumberOfResponders", headerParam6)
		}

	}

	return req, nil
}

// NewPublishSnapshotRequest calls the generic PublishSnapshot builder with application/json body
func NewPublishSnapshotRequest(server string, params *PublishSnapshotParams, body PublishSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishSnapshotRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPublishSnapshotRequestWithBody generates requests for PublishSnapshot with any type of body
func NewPublishSnapshotRequestWithBody(server string, params *PublishSnapshotParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishSnapshotRawRequestWithBody generates requests for PublishSnapshotRaw with any type of body
func NewPublishSnapshotRawRequestWithBody(server string, aggregateId string, params *PublishSnapshotRawParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aggregateId", runtime.ParamLocationPath, aggregateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, params.Context); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AxonIQMessageId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-MessageId", runtime.ParamLocationHeader, *params.AxonIQMessageId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-MessageId", headerParam0)
		}

		if params.AxonIQPayloadRevision != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadRevision", runtime.ParamLocationHeader, *params.AxonIQPayloadRevision)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadRevision", headerParam1)
		}

		if params.AxonIQPayloadType != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-PayloadType", runtime.ParamLocationHeader, *params.AxonIQPayloadType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-PayloadType", headerParam2)
		}

		if params.AxonIQAggregateType != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-AggregateType", runtime.ParamLocationHeader, *params.AxonIQAggregateType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-AggregateType", headerParam3)
		}

		if params.AxonIQSequenceNumber != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-SequenceNumber", runtime.ParamLocationHeader, *params.AxonIQSequenceNumber)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-SequenceNumber", headerParam4)
		}

		if params.AxonIQDateTime != nil {
			var headerParam5 string

			headerParam5, err = runtime.StyleParamWithLocation("simple", false, "AxonIQ-DateTime", runtime.ParamLocationHeader, *params.AxonIQDateTime)
			if err != nil {
				return nil, err
			}

			req.Header.Set("AxonIQ-DateTime", headerParam5)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReadAggregateEventsWithResponse request
	ReadAggregateEventsWithResponse(ctx context.Context, aggregateId string, params *ReadAggregateEventsParams, reqEditors ...RequestEditorFn) (*ReadAggregateEventsResponse, error)

	// ReadAggregateEventsPagedWithResponse request
	ReadAggregateEventsPagedWithResponse(ctx context.Context, aggregateId string, params *ReadAggregateEventsPagedParams, reqEditors ...RequestEditorFn) (*ReadAggregateEventsPagedResponse, error)

	// ReadSnapshotsWithResponse request
	ReadSnapshotsWithResponse(ctx context.Context, aggregateId string, params *ReadSnapshotsParams, reqEditors ...RequestEditorFn) (*ReadSnapshotsResponse, error)

	// DispatchCommandWithBodyWithResponse request with any body
	DispatchCommandWithBodyWithResponse(ctx context.Context, params *DispatchCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchCommandResponse, error)

	DispatchCommandWithResponse(ctx context.Context, params *DispatchCommandParams, body DispatchCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*DispatchCommandResponse, error)

	// DispatchCommandRawWithBodyWithResponse request with any body
	DispatchCommandRawWithBodyWithResponse(ctx context.Context, name string, params *DispatchCommandRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchCommandRawResponse, error)

	// EndpointsWithResponse request
	EndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EndpointsResponse, error)

	// RegisterEndpointWithBodyWithResponse request with any body
	RegisterEndpointWithBodyWithResponse(ctx context.Context, params *RegisterEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEndpointResponse, error)

	RegisterEndpointWithResponse(ctx context.Context, params *RegisterEndpointParams, body RegisterEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEndpointResponse, error)

	// DeleteEndpointWithResponse request
	DeleteEndpointWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*DeleteEndpointResponse, error)

	// GetEndpointWithResponse request
	GetEndpointWithResponse(ctx context.Context, endpointId string, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*GetEndpointResponse, error)

	// PatchEndpointWithResponse request
	PatchEndpointWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *PatchEndpointParams, reqEditors ...RequestEditorFn) (*PatchEndpointResponse, error)

	// UpdateEndpointWithBodyWithResponse request with any body
	UpdateEndpointWithBodyWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEndpointResponse, error)

	UpdateEndpointWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, body UpdateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEndpointResponse, error)

	// RegisterCommandHandlerWithBodyWithResponse request with any body
	RegisterCommandHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterCommandHandlerResponse, error)

	RegisterCommandHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, body RegisterCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterCommandHandlerResponse, error)

	// DeleteCommandHandlerWithResponse request
	DeleteCommandHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteCommandHandlerParams, reqEditors ...RequestEditorFn) (*DeleteCommandHandlerResponse, error)

	// GetCommandHandlerWithResponse request
	GetCommandHandlerWithResponse(ctx context.Context, endpoint string, handler string, params *GetCommandHandlerParams, reqEditors ...RequestEditorFn) (*GetCommandHandlerResponse, error)

	// UpdateCommandHandlerWithBodyWithResponse request with any body
	UpdateCommandHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommandHandlerResponse, error)

	UpdateCommandHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, body UpdateCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommandHandlerResponse, error)

	// RegisterEventHandlerWithBodyWithResponse request with any body
	RegisterEventHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEventHandlerResponse, error)

	RegisterEventHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, body RegisterEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEventHandlerResponse, error)

	// DeleteEventHandlerWithResponse request
	DeleteEventHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteEventHandlerParams, reqEditors ...RequestEditorFn) (*DeleteEventHandlerResponse, error)

	// GetEventHandlerWithResponse request
	GetEventHandlerWithResponse(ctx context.Context, endpoint string, handler string, params *GetEventHandlerParams, reqEditors ...RequestEditorFn) (*GetEventHandlerResponse, error)

	// UpdateEventHandlerWithBodyWithResponse request with any body
	UpdateEventHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEventHandlerResponse, error)

	UpdateEventHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, body UpdateEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEventHandlerResponse, error)

	// RegisterQueryHandlerWithBodyWithResponse request with any body
	RegisterQueryHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterQueryHandlerResponse, error)

	RegisterQueryHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, body RegisterQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterQueryHandlerResponse, error)

	// DeleteQueryHandlerWithResponse request
	DeleteQueryHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteQueryHandlerParams, reqEditors ...RequestEditorFn) (*DeleteQueryHandlerResponse, error)

	// GetQueryHandlerWithResponse request
	GetQueryHandlerWithResponse(ctx context.Context, endpoint string, handler string, params *GetQueryHandlerParams, reqEditors ...RequestEditorFn) (*GetQueryHandlerResponse, error)

	// UpdateQueryHandlerWithBodyWithResponse request with any body
	UpdateQueryHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateQueryHandlerResponse, error)

	UpdateQueryHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, body UpdateQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateQueryHandlerResponse, error)

	// PublishEvents1WithBodyWithResponse request with any body
	PublishEvents1WithBodyWithResponse(ctx context.Context, params *PublishEvents1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishEvents1Response, error)

	PublishEvents1WithResponse(ctx context.Context, params *PublishEvents1Params, body PublishEvents1JSONRequestBody, reqEditors ...RequestEditorFn) (*PublishEvents1Response, error)

	PublishEvents1WithApplicationVndAxoniqEventListPlusJSONBodyWithResponse(ctx context.Context, params *PublishEvents1Params, body PublishEvents1ApplicationVndAxoniqEventListPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishEvents1Response, error)

	// PublishEventRawWithBodyWithResponse request with any body
	PublishEventRawWithBodyWithResponse(ctx context.Context, name string, params *PublishEventRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishEventRawResponse, error)

	// DispatchQueryRawWithBodyWithResponse request with any body
	DispatchQueryRawWithBodyWithResponse(ctx context.Context, params *DispatchQueryRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchQueryRawResponse, error)

	DispatchQueryRawWithResponse(ctx context.Context, params *DispatchQueryRawParams, body DispatchQueryRawJSONRequestBody, reqEditors ...RequestEditorFn) (*DispatchQueryRawResponse, error)

	// DispatchQueryWithBodyWithResponse request with any body
	DispatchQueryWithBodyWithResponse(ctx context.Context, name string, params *DispatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchQueryResponse, error)

	// PublishSnapshotWithBodyWithResponse request with any body
	PublishSnapshotWithBodyWithResponse(ctx context.Context, params *PublishSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishSnapshotResponse, error)

	PublishSnapshotWithResponse(ctx context.Context, params *PublishSnapshotParams, body PublishSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishSnapshotResponse, error)

	// PublishSnapshotRawWithBodyWithResponse request with any body
	PublishSnapshotRawWithBodyWithResponse(ctx context.Context, aggregateId string, params *PublishSnapshotRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishSnapshotRawResponse, error)
}

type ReadAggregateEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r ReadAggregateEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAggregateEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadAggregateEventsPagedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AggregatePage
}

// Status returns HTTPResponse.Status
func (r ReadAggregateEventsPagedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAggregateEventsPagedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Snapshot
}

// Status returns HTTPResponse.Status
func (r ReadSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DispatchCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResponse
	JSON500      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DispatchCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DispatchCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DispatchCommandRawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DispatchCommandRawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DispatchCommandRawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterCommandHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Id
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterCommandHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterCommandHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommandHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCommandHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommandHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommandHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandHandler
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCommandHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommandHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCommandHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCommandHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCommandHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterEventHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterEventHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterEventHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEventHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEventHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEventHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventHandler
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEventHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEventHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateEventHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEventHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterQueryHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Id
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterQueryHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterQueryHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteQueryHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteQueryHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteQueryHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueryHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryHandler
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetQueryHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueryHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateQueryHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateQueryHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateQueryHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishEvents1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishEvents1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishEvents1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishEventRawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishEventRawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishEventRawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DispatchQueryRawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON400      *ErrorResponse
	JSON500      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DispatchQueryRawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DispatchQueryRawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DispatchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DispatchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DispatchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishSnapshotRawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishSnapshotRawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishSnapshotRawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReadAggregateEventsWithResponse request returning *ReadAggregateEventsResponse
func (c *ClientWithResponses) ReadAggregateEventsWithResponse(ctx context.Context, aggregateId string, params *ReadAggregateEventsParams, reqEditors ...RequestEditorFn) (*ReadAggregateEventsResponse, error) {
	rsp, err := c.ReadAggregateEvents(ctx, aggregateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAggregateEventsResponse(rsp)
}

// ReadAggregateEventsPagedWithResponse request returning *ReadAggregateEventsPagedResponse
func (c *ClientWithResponses) ReadAggregateEventsPagedWithResponse(ctx context.Context, aggregateId string, params *ReadAggregateEventsPagedParams, reqEditors ...RequestEditorFn) (*ReadAggregateEventsPagedResponse, error) {
	rsp, err := c.ReadAggregateEventsPaged(ctx, aggregateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAggregateEventsPagedResponse(rsp)
}

// ReadSnapshotsWithResponse request returning *ReadSnapshotsResponse
func (c *ClientWithResponses) ReadSnapshotsWithResponse(ctx context.Context, aggregateId string, params *ReadSnapshotsParams, reqEditors ...RequestEditorFn) (*ReadSnapshotsResponse, error) {
	rsp, err := c.ReadSnapshots(ctx, aggregateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSnapshotsResponse(rsp)
}

// DispatchCommandWithBodyWithResponse request with arbitrary body returning *DispatchCommandResponse
func (c *ClientWithResponses) DispatchCommandWithBodyWithResponse(ctx context.Context, params *DispatchCommandParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchCommandResponse, error) {
	rsp, err := c.DispatchCommandWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDispatchCommandResponse(rsp)
}

func (c *ClientWithResponses) DispatchCommandWithResponse(ctx context.Context, params *DispatchCommandParams, body DispatchCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*DispatchCommandResponse, error) {
	rsp, err := c.DispatchCommand(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDispatchCommandResponse(rsp)
}

// DispatchCommandRawWithBodyWithResponse request with arbitrary body returning *DispatchCommandRawResponse
func (c *ClientWithResponses) DispatchCommandRawWithBodyWithResponse(ctx context.Context, name string, params *DispatchCommandRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchCommandRawResponse, error) {
	rsp, err := c.DispatchCommandRawWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDispatchCommandRawResponse(rsp)
}

// EndpointsWithResponse request returning *EndpointsResponse
func (c *ClientWithResponses) EndpointsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EndpointsResponse, error) {
	rsp, err := c.Endpoints(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsResponse(rsp)
}

// RegisterEndpointWithBodyWithResponse request with arbitrary body returning *RegisterEndpointResponse
func (c *ClientWithResponses) RegisterEndpointWithBodyWithResponse(ctx context.Context, params *RegisterEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEndpointResponse, error) {
	rsp, err := c.RegisterEndpointWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEndpointResponse(rsp)
}

func (c *ClientWithResponses) RegisterEndpointWithResponse(ctx context.Context, params *RegisterEndpointParams, body RegisterEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEndpointResponse, error) {
	rsp, err := c.RegisterEndpoint(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEndpointResponse(rsp)
}

// DeleteEndpointWithResponse request returning *DeleteEndpointResponse
func (c *ClientWithResponses) DeleteEndpointWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*DeleteEndpointResponse, error) {
	rsp, err := c.DeleteEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointResponse(rsp)
}

// GetEndpointWithResponse request returning *GetEndpointResponse
func (c *ClientWithResponses) GetEndpointWithResponse(ctx context.Context, endpointId string, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*GetEndpointResponse, error) {
	rsp, err := c.GetEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointResponse(rsp)
}

// PatchEndpointWithResponse request returning *PatchEndpointResponse
func (c *ClientWithResponses) PatchEndpointWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *PatchEndpointParams, reqEditors ...RequestEditorFn) (*PatchEndpointResponse, error) {
	rsp, err := c.PatchEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEndpointResponse(rsp)
}

// UpdateEndpointWithBodyWithResponse request with arbitrary body returning *UpdateEndpointResponse
func (c *ClientWithResponses) UpdateEndpointWithBodyWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEndpointResponse, error) {
	rsp, err := c.UpdateEndpointWithBody(ctx, endpointId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEndpointResponse(rsp)
}

func (c *ClientWithResponses) UpdateEndpointWithResponse(ctx context.Context, endpointId openapi_types.UUID, params *UpdateEndpointParams, body UpdateEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEndpointResponse, error) {
	rsp, err := c.UpdateEndpoint(ctx, endpointId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEndpointResponse(rsp)
}

// RegisterCommandHandlerWithBodyWithResponse request with arbitrary body returning *RegisterCommandHandlerResponse
func (c *ClientWithResponses) RegisterCommandHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterCommandHandlerResponse, error) {
	rsp, err := c.RegisterCommandHandlerWithBody(ctx, endpoint, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterCommandHandlerResponse(rsp)
}

func (c *ClientWithResponses) RegisterCommandHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterCommandHandlerParams, body RegisterCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterCommandHandlerResponse, error) {
	rsp, err := c.RegisterCommandHandler(ctx, endpoint, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterCommandHandlerResponse(rsp)
}

// DeleteCommandHandlerWithResponse request returning *DeleteCommandHandlerResponse
func (c *ClientWithResponses) DeleteCommandHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteCommandHandlerParams, reqEditors ...RequestEditorFn) (*DeleteCommandHandlerResponse, error) {
	rsp, err := c.DeleteCommandHandler(ctx, endpoint, handler, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommandHandlerResponse(rsp)
}

// GetCommandHandlerWithResponse request returning *GetCommandHandlerResponse
func (c *ClientWithResponses) GetCommandHandlerWithResponse(ctx context.Context, endpoint string, handler string, params *GetCommandHandlerParams, reqEditors ...RequestEditorFn) (*GetCommandHandlerResponse, error) {
	rsp, err := c.GetCommandHandler(ctx, endpoint, handler, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommandHandlerResponse(rsp)
}

// UpdateCommandHandlerWithBodyWithResponse request with arbitrary body returning *UpdateCommandHandlerResponse
func (c *ClientWithResponses) UpdateCommandHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommandHandlerResponse, error) {
	rsp, err := c.UpdateCommandHandlerWithBody(ctx, endpoint, handler, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommandHandlerResponse(rsp)
}

func (c *ClientWithResponses) UpdateCommandHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateCommandHandlerParams, body UpdateCommandHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommandHandlerResponse, error) {
	rsp, err := c.UpdateCommandHandler(ctx, endpoint, handler, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommandHandlerResponse(rsp)
}

// RegisterEventHandlerWithBodyWithResponse request with arbitrary body returning *RegisterEventHandlerResponse
func (c *ClientWithResponses) RegisterEventHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEventHandlerResponse, error) {
	rsp, err := c.RegisterEventHandlerWithBody(ctx, endpoint, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEventHandlerResponse(rsp)
}

func (c *ClientWithResponses) RegisterEventHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterEventHandlerParams, body RegisterEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterEventHandlerResponse, error) {
	rsp, err := c.RegisterEventHandler(ctx, endpoint, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEventHandlerResponse(rsp)
}

// DeleteEventHandlerWithResponse request returning *DeleteEventHandlerResponse
func (c *ClientWithResponses) DeleteEventHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteEventHandlerParams, reqEditors ...RequestEditorFn) (*DeleteEventHandlerResponse, error) {
	rsp, err := c.DeleteEventHandler(ctx, endpoint, handler, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEventHandlerResponse(rsp)
}

// GetEventHandlerWithResponse request returning *GetEventHandlerResponse
func (c *ClientWithResponses) GetEventHandlerWithResponse(ctx context.Context, endpoint string, handler string, params *GetEventHandlerParams, reqEditors ...RequestEditorFn) (*GetEventHandlerResponse, error) {
	rsp, err := c.GetEventHandler(ctx, endpoint, handler, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventHandlerResponse(rsp)
}

// UpdateEventHandlerWithBodyWithResponse request with arbitrary body returning *UpdateEventHandlerResponse
func (c *ClientWithResponses) UpdateEventHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEventHandlerResponse, error) {
	rsp, err := c.UpdateEventHandlerWithBody(ctx, endpoint, handler, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEventHandlerResponse(rsp)
}

func (c *ClientWithResponses) UpdateEventHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateEventHandlerParams, body UpdateEventHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEventHandlerResponse, error) {
	rsp, err := c.UpdateEventHandler(ctx, endpoint, handler, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEventHandlerResponse(rsp)
}

// RegisterQueryHandlerWithBodyWithResponse request with arbitrary body returning *RegisterQueryHandlerResponse
func (c *ClientWithResponses) RegisterQueryHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterQueryHandlerResponse, error) {
	rsp, err := c.RegisterQueryHandlerWithBody(ctx, endpoint, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterQueryHandlerResponse(rsp)
}

func (c *ClientWithResponses) RegisterQueryHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, params *RegisterQueryHandlerParams, body RegisterQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterQueryHandlerResponse, error) {
	rsp, err := c.RegisterQueryHandler(ctx, endpoint, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterQueryHandlerResponse(rsp)
}

// DeleteQueryHandlerWithResponse request returning *DeleteQueryHandlerResponse
func (c *ClientWithResponses) DeleteQueryHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *DeleteQueryHandlerParams, reqEditors ...RequestEditorFn) (*DeleteQueryHandlerResponse, error) {
	rsp, err := c.DeleteQueryHandler(ctx, endpoint, handler, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteQueryHandlerResponse(rsp)
}

// GetQueryHandlerWithResponse request returning *GetQueryHandlerResponse
func (c *ClientWithResponses) GetQueryHandlerWithResponse(ctx context.Context, endpoint string, handler string, params *GetQueryHandlerParams, reqEditors ...RequestEditorFn) (*GetQueryHandlerResponse, error) {
	rsp, err := c.GetQueryHandler(ctx, endpoint, handler, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueryHandlerResponse(rsp)
}

// UpdateQueryHandlerWithBodyWithResponse request with arbitrary body returning *UpdateQueryHandlerResponse
func (c *ClientWithResponses) UpdateQueryHandlerWithBodyWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateQueryHandlerResponse, error) {
	rsp, err := c.UpdateQueryHandlerWithBody(ctx, endpoint, handler, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateQueryHandlerResponse(rsp)
}

func (c *ClientWithResponses) UpdateQueryHandlerWithResponse(ctx context.Context, endpoint openapi_types.UUID, handler openapi_types.UUID, params *UpdateQueryHandlerParams, body UpdateQueryHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateQueryHandlerResponse, error) {
	rsp, err := c.UpdateQueryHandler(ctx, endpoint, handler, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateQueryHandlerResponse(rsp)
}

// PublishEvents1WithBodyWithResponse request with arbitrary body returning *PublishEvents1Response
func (c *ClientWithResponses) PublishEvents1WithBodyWithResponse(ctx context.Context, params *PublishEvents1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishEvents1Response, error) {
	rsp, err := c.PublishEvents1WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEvents1Response(rsp)
}

func (c *ClientWithResponses) PublishEvents1WithResponse(ctx context.Context, params *PublishEvents1Params, body PublishEvents1JSONRequestBody, reqEditors ...RequestEditorFn) (*PublishEvents1Response, error) {
	rsp, err := c.PublishEvents1(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEvents1Response(rsp)
}

func (c *ClientWithResponses) PublishEvents1WithApplicationVndAxoniqEventListPlusJSONBodyWithResponse(ctx context.Context, params *PublishEvents1Params, body PublishEvents1ApplicationVndAxoniqEventListPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishEvents1Response, error) {
	rsp, err := c.PublishEvents1WithApplicationVndAxoniqEventListPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEvents1Response(rsp)
}

// PublishEventRawWithBodyWithResponse request with arbitrary body returning *PublishEventRawResponse
func (c *ClientWithResponses) PublishEventRawWithBodyWithResponse(ctx context.Context, name string, params *PublishEventRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishEventRawResponse, error) {
	rsp, err := c.PublishEventRawWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEventRawResponse(rsp)
}

// DispatchQueryRawWithBodyWithResponse request with arbitrary body returning *DispatchQueryRawResponse
func (c *ClientWithResponses) DispatchQueryRawWithBodyWithResponse(ctx context.Context, params *DispatchQueryRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchQueryRawResponse, error) {
	rsp, err := c.DispatchQueryRawWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDispatchQueryRawResponse(rsp)
}

func (c *ClientWithResponses) DispatchQueryRawWithResponse(ctx context.Context, params *DispatchQueryRawParams, body DispatchQueryRawJSONRequestBody, reqEditors ...RequestEditorFn) (*DispatchQueryRawResponse, error) {
	rsp, err := c.DispatchQueryRaw(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDispatchQueryRawResponse(rsp)
}

// DispatchQueryWithBodyWithResponse request with arbitrary body returning *DispatchQueryResponse
func (c *ClientWithResponses) DispatchQueryWithBodyWithResponse(ctx context.Context, name string, params *DispatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DispatchQueryResponse, error) {
	rsp, err := c.DispatchQueryWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDispatchQueryResponse(rsp)
}

// PublishSnapshotWithBodyWithResponse request with arbitrary body returning *PublishSnapshotResponse
func (c *ClientWithResponses) PublishSnapshotWithBodyWithResponse(ctx context.Context, params *PublishSnapshotParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishSnapshotResponse, error) {
	rsp, err := c.PublishSnapshotWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishSnapshotResponse(rsp)
}

func (c *ClientWithResponses) PublishSnapshotWithResponse(ctx context.Context, params *PublishSnapshotParams, body PublishSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishSnapshotResponse, error) {
	rsp, err := c.PublishSnapshot(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishSnapshotResponse(rsp)
}

// PublishSnapshotRawWithBodyWithResponse request with arbitrary body returning *PublishSnapshotRawResponse
func (c *ClientWithResponses) PublishSnapshotRawWithBodyWithResponse(ctx context.Context, aggregateId string, params *PublishSnapshotRawParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishSnapshotRawResponse, error) {
	rsp, err := c.PublishSnapshotRawWithBody(ctx, aggregateId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishSnapshotRawResponse(rsp)
}

// ParseReadAggregateEventsResponse parses an HTTP response from a ReadAggregateEventsWithResponse call
func ParseReadAggregateEventsResponse(rsp *http.Response) (*ReadAggregateEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAggregateEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReadAggregateEventsPagedResponse parses an HTTP response from a ReadAggregateEventsPagedWithResponse call
func ParseReadAggregateEventsPagedResponse(rsp *http.Response) (*ReadAggregateEventsPagedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAggregateEventsPagedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AggregatePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReadSnapshotsResponse parses an HTTP response from a ReadSnapshotsWithResponse call
func ParseReadSnapshotsResponse(rsp *http.Response) (*ReadSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Snapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDispatchCommandResponse parses an HTTP response from a DispatchCommandWithResponse call
func ParseDispatchCommandResponse(rsp *http.Response) (*DispatchCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DispatchCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDispatchCommandRawResponse parses an HTTP response from a DispatchCommandRawWithResponse call
func ParseDispatchCommandRawResponse(rsp *http.Response) (*DispatchCommandRawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DispatchCommandRawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEndpointsResponse parses an HTTP response from a EndpointsWithResponse call
func ParseEndpointsResponse(rsp *http.Response) (*EndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegisterEndpointResponse parses an HTTP response from a RegisterEndpointWithResponse call
func ParseRegisterEndpointResponse(rsp *http.Response) (*RegisterEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEndpointResponse parses an HTTP response from a DeleteEndpointWithResponse call
func ParseDeleteEndpointResponse(rsp *http.Response) (*DeleteEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEndpointResponse parses an HTTP response from a GetEndpointWithResponse call
func ParseGetEndpointResponse(rsp *http.Response) (*GetEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchEndpointResponse parses an HTTP response from a PatchEndpointWithResponse call
func ParsePatchEndpointResponse(rsp *http.Response) (*PatchEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateEndpointResponse parses an HTTP response from a UpdateEndpointWithResponse call
func ParseUpdateEndpointResponse(rsp *http.Response) (*UpdateEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegisterCommandHandlerResponse parses an HTTP response from a RegisterCommandHandlerWithResponse call
func ParseRegisterCommandHandlerResponse(rsp *http.Response) (*RegisterCommandHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterCommandHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Id
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCommandHandlerResponse parses an HTTP response from a DeleteCommandHandlerWithResponse call
func ParseDeleteCommandHandlerResponse(rsp *http.Response) (*DeleteCommandHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommandHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCommandHandlerResponse parses an HTTP response from a GetCommandHandlerWithResponse call
func ParseGetCommandHandlerResponse(rsp *http.Response) (*GetCommandHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommandHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandHandler
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCommandHandlerResponse parses an HTTP response from a UpdateCommandHandlerWithResponse call
func ParseUpdateCommandHandlerResponse(rsp *http.Response) (*UpdateCommandHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCommandHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRegisterEventHandlerResponse parses an HTTP response from a RegisterEventHandlerWithResponse call
func ParseRegisterEventHandlerResponse(rsp *http.Response) (*RegisterEventHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterEventHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEventHandlerResponse parses an HTTP response from a DeleteEventHandlerWithResponse call
func ParseDeleteEventHandlerResponse(rsp *http.Response) (*DeleteEventHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEventHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventHandlerResponse parses an HTTP response from a GetEventHandlerWithResponse call
func ParseGetEventHandlerResponse(rsp *http.Response) (*GetEventHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventHandler
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateEventHandlerResponse parses an HTTP response from a UpdateEventHandlerWithResponse call
func ParseUpdateEventHandlerResponse(rsp *http.Response) (*UpdateEventHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEventHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegisterQueryHandlerResponse parses an HTTP response from a RegisterQueryHandlerWithResponse call
func ParseRegisterQueryHandlerResponse(rsp *http.Response) (*RegisterQueryHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterQueryHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Id
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteQueryHandlerResponse parses an HTTP response from a DeleteQueryHandlerWithResponse call
func ParseDeleteQueryHandlerResponse(rsp *http.Response) (*DeleteQueryHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteQueryHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetQueryHandlerResponse parses an HTTP response from a GetQueryHandlerWithResponse call
func ParseGetQueryHandlerResponse(rsp *http.Response) (*GetQueryHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueryHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryHandler
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateQueryHandlerResponse parses an HTTP response from a UpdateQueryHandlerWithResponse call
func ParseUpdateQueryHandlerResponse(rsp *http.Response) (*UpdateQueryHandlerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateQueryHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePublishEvents1Response parses an HTTP response from a PublishEvents1WithResponse call
func ParsePublishEvents1Response(rsp *http.Response) (*PublishEvents1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishEvents1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishEventRawResponse parses an HTTP response from a PublishEventRawWithResponse call
func ParsePublishEventRawResponse(rsp *http.Response) (*PublishEventRawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishEventRawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDispatchQueryRawResponse parses an HTTP response from a DispatchQueryRawWithResponse call
func ParseDispatchQueryRawResponse(rsp *http.Response) (*DispatchQueryRawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DispatchQueryRawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDispatchQueryResponse parses an HTTP response from a DispatchQueryWithResponse call
func ParseDispatchQueryResponse(rsp *http.Response) (*DispatchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DispatchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePublishSnapshotResponse parses an HTTP response from a PublishSnapshotWithResponse call
func ParsePublishSnapshotResponse(rsp *http.Response) (*PublishSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishSnapshotRawResponse parses an HTTP response from a PublishSnapshotRawWithResponse call
func ParsePublishSnapshotRawResponse(rsp *http.Response) (*PublishSnapshotRawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishSnapshotRawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
